[
    {
        "id": "e399374c21ab7d48",
        "type": "tab",
        "label": "ESP32 Motor Control (Serial Binario)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "364c1914a5d564fe",
        "type": "serial in",
        "z": "e399374c21ab7d48",
        "name": "RX: Motor Data (Binario)",
        "serial": "2e0a2b4f.5a4f6e",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "c51639377e0d9173",
                "47fa2fa885dd5567"
            ]
        ]
    },
    {
        "id": "c51639377e0d9173",
        "type": "function",
        "z": "e399374c21ab7d48",
        "name": "Parse Binary Packet (7 bytes)",
        "func": "// String D:0,T:0\nif (msg?.payload) {\n\n    // Parsear string formato \"T:0,D:0\"\n    if (typeof msg.payload === \"string\") {\n        try {\n            // Separar los pares por coma\n            let partes = msg.payload.split(\",\");\n            let direction = 0, ticks = 0;\n\n            // Extraer cada valor del string\n            partes.forEach(parte => {\n                let [key, value] = parte.split(\":\");\n                key = key.trim().toLowerCase();\n                value = parseInt(value, 10);\n                if (key === \"d\") direction = value;\n                if (key === \"t\") ticks = value;\n            });\n\n            // Reasignar los valores obtenidos\n            msg.payload = {\n                direction: direction === 0 ? '-------' : direction <  0 ? 'horario' : 'antihorario',\n                ticks: ticks\n            };\n        } catch (e) {\n            // Si algo falla, retornar null\n            return null;\n        }\n\n        return msg;\n    }\n\n    // Si msg.payload ya es objeto, usa los valores existentes si existen\n    msg.payload = {\n        direction: msg.payload.direction || 0,\n        ticks: msg.payload.ticks || 0\n    };\n\n    return msg;\n}\n\n// [translate:Si el paquete no es válido, no enviar nada]\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "4717b0e03ba54435",
                "3be8b4b549138ed4"
            ]
        ]
    },
    {
        "id": "4717b0e03ba54435",
        "type": "change",
        "z": "e399374c21ab7d48",
        "name": "Extraer Direction",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.direction",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 100,
        "wires": [
            [
                "2eb610bd8923f7cc"
            ]
        ]
    },
    {
        "id": "3be8b4b549138ed4",
        "type": "change",
        "z": "e399374c21ab7d48",
        "name": "Extraer Ticks",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ticks",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "a33abb9f4954e428",
                "165d834d79637866"
            ]
        ]
    },
    {
        "id": "a33abb9f4954e428",
        "type": "ui_gauge",
        "z": "e399374c21ab7d48",
        "name": "Encoder Ticks",
        "group": "e1f2g3h4i5j6k7l8",
        "order": 2,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "",
        "label": "ticks",
        "format": "{{value}}",
        "min": "-32768",
        "max": "32767",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "10000",
        "seg2": "20000",
        "diff": false,
        "className": "",
        "x": 920,
        "y": 220,
        "wires": []
    },
    {
        "id": "b58fea213167eb83",
        "type": "ui_form",
        "z": "e399374c21ab7d48",
        "name": "Setpoint Control",
        "label": "",
        "group": "e1f2g3h4i5j6k7l8",
        "order": 3,
        "width": 6,
        "height": 3,
        "options": [
            {
                "label": "Setpoint (ticks)",
                "value": "setpoint",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "setpoint": ""
        },
        "payload": "",
        "submit": "Enviar Setpoint",
        "cancel": "Reset",
        "topic": "setpoint",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "73f5af7da53c2000"
            ]
        ]
    },
    {
        "id": "73f5af7da53c2000",
        "type": "function",
        "z": "e399374c21ab7d48",
        "name": "Formato Texto con \\n",
        "func": "// El ESP32 espera un número entero terminado en \\n\nlet setpoint = msg.payload.setpoint;\n\n// Convertir a string y agregar salto de línea\nmsg.payload = setpoint.toString() + \"\\n\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 320,
        "wires": [
            [
                "c031992fe8e55d53"
            ]
        ]
    },
    {
        "id": "c031992fe8e55d53",
        "type": "serial out",
        "z": "e399374c21ab7d48",
        "name": "TX: Setpoint a ESP32",
        "serial": "2e0a2b4f.5a4f6e",
        "x": 680,
        "y": 320,
        "wires": []
    },
    {
        "id": "47fa2fa885dd5567",
        "type": "debug",
        "z": "e399374c21ab7d48",
        "name": "Debug RAW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 240,
        "wires": []
    },
    {
        "id": "165d834d79637866",
        "type": "ui_chart",
        "z": "e399374c21ab7d48",
        "name": "Posicón del motor",
        "group": "e1f2g3h4i5j6k7l8",
        "order": 0,
        "width": "13",
        "height": "13",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2eb610bd8923f7cc",
        "type": "ui_text",
        "z": "e399374c21ab7d48",
        "group": "e1f2g3h4i5j6k7l8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sentido del giro",
        "format": "{{msg.payload }}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Impact,Impact,Charcoal,sans-serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "2e0a2b4f.5a4f6e",
        "type": "serial-port",
        "name": "USB0",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "e1f2g3h4i5j6k7l8",
        "type": "ui_group",
        "name": "Contro de posición de motor.",
        "tab": "f1g2h3i4j5k6l7m8",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1g2h3i4j5k6l7m8",
        "type": "ui_tab",
        "name": "Motor PID ESP32",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "81c610d01c0aaecc",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-node-serialport": "2.0.3",
            "node-red-dashboard": "3.6.6"
        }
    }
]